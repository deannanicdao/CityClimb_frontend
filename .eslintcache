[{"/Users/jellis/final_app/CityClimb_frontend/src/index.js":"1","/Users/jellis/final_app/CityClimb_frontend/src/App.js":"2","/Users/jellis/final_app/CityClimb_frontend/src/components/layout/Navbar.js":"3","/Users/jellis/final_app/CityClimb_frontend/src/components/layout/Landing.js":"4","/Users/jellis/final_app/CityClimb_frontend/src/components/routing/Routes.js":"5","/Users/jellis/final_app/CityClimb_frontend/src/components/layout/Schedule.js":"6","/Users/jellis/final_app/CityClimb_frontend/src/components/layout/NotFound.js":"7","/Users/jellis/final_app/CityClimb_frontend/src/components/layout/Help.js":"8","/Users/jellis/final_app/CityClimb_frontend/src/components/layout/Search.js":"9","/Users/jellis/final_app/CityClimb_frontend/src/components/auth/Login.js":"10","/Users/jellis/final_app/CityClimb_frontend/src/components/climbs/CreateClimbForm.js":"11","/Users/jellis/final_app/CityClimb_frontend/src/components/admin/StaffDashboard.js":"12","/Users/jellis/final_app/CityClimb_frontend/src/components/layout/ClimbList.js":"13","/Users/jellis/final_app/CityClimb_frontend/src/components/layout/SingleClimb.js":"14","/Users/jellis/final_app/CityClimb_frontend/src/components/auth/Register.js":"15","/Users/jellis/final_app/CityClimb_frontend/src/components/climbs/Climb.js":"16","/Users/jellis/final_app/CityClimb_frontend/src/components/layout/GymView.js":"17","/Users/jellis/final_app/CityClimb_frontend/src/components/layout/Button.js":"18"},{"size":602,"mtime":1612503242796,"results":"19","hashOfConfig":"20"},{"size":517,"mtime":1612319205240,"results":"21","hashOfConfig":"20"},{"size":3977,"mtime":1612583509050,"results":"22","hashOfConfig":"20"},{"size":528,"mtime":1612243226879,"results":"23","hashOfConfig":"20"},{"size":1923,"mtime":1612503242795,"results":"24","hashOfConfig":"20"},{"size":1912,"mtime":1612485815159,"results":"25","hashOfConfig":"20"},{"size":206,"mtime":1612230715797,"results":"26","hashOfConfig":"20"},{"size":186,"mtime":1612240314374,"results":"27","hashOfConfig":"20"},{"size":1786,"mtime":1612503242794,"results":"28","hashOfConfig":"20"},{"size":1837,"mtime":1612230715795,"results":"29","hashOfConfig":"20"},{"size":4142,"mtime":1612318682690,"results":"30","hashOfConfig":"20"},{"size":171,"mtime":1612230715795,"results":"31","hashOfConfig":"20"},{"size":1409,"mtime":1612503242793,"results":"32","hashOfConfig":"20"},{"size":1873,"mtime":1612503828147,"results":"33","hashOfConfig":"20"},{"size":3595,"mtime":1612503828147,"results":"34","hashOfConfig":"20"},{"size":846,"mtime":1612503242793,"results":"35","hashOfConfig":"20"},{"size":2348,"mtime":1612503242794,"results":"36","hashOfConfig":"20"},{"size":970,"mtime":1612583285998,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1ezi0h2",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":1,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"40"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"40"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"40"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jellis/final_app/CityClimb_frontend/src/index.js",[],["81","82"],"/Users/jellis/final_app/CityClimb_frontend/src/App.js",[],"/Users/jellis/final_app/CityClimb_frontend/src/components/layout/Navbar.js",["83","84","85","86"],"/Users/jellis/final_app/CityClimb_frontend/src/components/layout/Landing.js",[],"/Users/jellis/final_app/CityClimb_frontend/src/components/routing/Routes.js",["87"],"import React from 'react'\nimport { Link, Switch, Route } from 'react-router-dom'\nimport Register from '../auth/Register'\nimport Login from '../auth/Login'\nimport Search from './../layout/Search'\nimport Schedule from './../layout/Schedule'\nimport StaffDashboard from './../admin/StaffDashboard'\nimport CreateClimbForm from './../climbs/CreateClimbForm'\nimport Help from './../layout/Help'\nimport NotFound from '../layout/NotFound'\nimport ClimbList from './../layout/ClimbList'\nimport Climb from './../climbs/Climb'\nimport SingleClimb from './../layout/SingleClimb'\n\n\nexport const Routes = () => {\n    return (\n        <section className=\"container\">\n            <Switch>\n                <Route exact path=\"/staff_register\" component={Register} />\n                <Route exact path=\"/staff_login\" component={Login} />\n                <Route exact path=\"/search\" component={Search} />\n                <Route exact path=\"/schedule\" component={Schedule} />\n                <Route exact path=\"/staff_dashboard\" component={StaffDashboard} />\n                <Route exact path=\"/create_climb\" component={CreateClimbForm} />\n                {/* <Route path=\"/climbs/:gym/:colour\" component={ClimbList} /> */}\n                <Route exact path=\"/climbs/:gym/:colour\" render={(props) => <ClimbList {...props} />} />\n                <Route exact path=\"/climbs/:gym/:colour/:climbId\" component={SingleClimb} />\n                <Route exact path=\"/help\" component={Help} />\n                <Route exact path=\"/climb_template\" component={Climb} />\n                <Route component={NotFound} /> \n            </Switch>\n        </section>\n    )\n}\n\nexport default Routes\n\n//             <Route exact path=\"/jobs/:id\" render={(props) => <EditJobPage {...props} loggedInUser={loggedInUser}/>} />\n//           <Route exact path=\"/gallery\" render={() => <GalleryPage />} />\n//           <Route exact path=\"/about\" render={() => <AboutPage />} />","/Users/jellis/final_app/CityClimb_frontend/src/components/layout/Schedule.js",[],"/Users/jellis/final_app/CityClimb_frontend/src/components/layout/NotFound.js",[],"/Users/jellis/final_app/CityClimb_frontend/src/components/layout/Help.js",[],"/Users/jellis/final_app/CityClimb_frontend/src/components/layout/Search.js",["88","89","90"],"import React, { Fragment }  from 'react'\nimport { useForm } from \"react-hook-form\"\nimport GymView from './GymView'\n\nconst Search = () => {\n    const { register, watch } = useForm()\n\n    const selectedGym = watch(\"gym\", false)\n\n    \n\n    return (\n        <Fragment>\n            <p className='large'>Select Gym</p>\n            <form>\n                <input type=\"radio\" name=\"gym\" value=\"milton\" ref={register}/>Milton\n                <input type=\"radio\" name=\"gym\" value=\"newstead\" ref={register}/>Newstead\n                <input type=\"radio\" name=\"gym\" value=\"westend\" ref={register}/>West End\n            </form>\n\n            {selectedGym == \"milton\" && <GymView gym={\"milton\"}/>}\n            {selectedGym == \"newstead\" && <GymView gym={\"newstead\"}/>}\n            {selectedGym == \"westend\" && <GymView gym={\"westend\"}/>}\n        </Fragment>\n    )\n}\n\nexport default Search\n\n// import React from \"react\";\n// import { useForm } from \"react-hook-form\";\n\n// function App() {\n//   const { register, watch, errors, handleSubmit } = useForm();\n//   const watchShowAge = watch(\"showAge\", false); // you can supply default value as second argument\n//   const watchAllFields = watch(); // when pass nothing as argument, you are watching everything\n//   const watchFields = watch([\"showAge\", \"number\"]); // you can also target specific fields by their names\n\n//   const onSubmit = data => console.log(data);\n\n//   return (\n//     <>\n//       <form onSubmit={handleSubmit(onSubmit)}>\n//         <input type=\"checkbox\" name=\"showAge\" ref={register} />\n        \n//         {/* based on yes selection to display Age Input*/}\n//         {watchShowAge && <input type=\"number\" name=\"age\" ref={register({ min: 50 })} />}\n        \n//         <input type=\"submit\" />\n//       </form>\n//     </>\n//   );\n// }","/Users/jellis/final_app/CityClimb_frontend/src/components/auth/Login.js",["91","92"],"import React, { Fragment, useState } from 'react'\n\n\nconst Login = () => {\n    const [formData, setFormData] = useState({\n        email: '',\n        staffNumber: '',\n        password: ''\n    })\n\n    const { email, staffNumber, password } = formData\n\n    const onChange = e => \n        setFormData({ ...formData, [e.target.name]: e.target.value })\n\n    const onSubmit = async e => {\n        e.preventDefault()\n        console.log(formData)\n\n        const loggedInUser = {\n            email, \n            staffNumber,\n            password\n        }\n\n        try {\n            const config = {\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            }\n\n            const body = JSON.stringify(loggedInUser)\n\n            // const res = await axios.get('/users', body, config)\n            // console.log(res.data)\n        } catch (err) {\n            console.error(err.message)\n        }\n    }\n\n\n    return (\n        <Fragment>\n            <h1>Login</h1>\n            <form className='form' onSubmit={e => onSubmit(e)}>\n                <div className='form-group'>\n                    <input type='text' placeholder='Email Address' name='email' value={email} onChange={e => onChange(e)} required />\n                </div>\n                <div className='form-group'>\n                    <input type='text' placeholder='Staff Number' name='staffNumber' value={staffNumber} onChange={e => onChange(e)} required />\n                </div>\n                <div className='form-group'>\n                    <input type='text' placeholder='Password' name='password' value={password} onChange={e => onChange(e)} required />\n                </div>\n                <input type=\"submit\" className=\"btn btn-primary\" value=\"Login\"/>\n            </form>\n        </Fragment>\n    )\n}\n\nexport default Login\n","/Users/jellis/final_app/CityClimb_frontend/src/components/climbs/CreateClimbForm.js",[],"/Users/jellis/final_app/CityClimb_frontend/src/components/admin/StaffDashboard.js",[],"/Users/jellis/final_app/CityClimb_frontend/src/components/layout/ClimbList.js",["93","94"],"import React, { useState, useEffect } from 'react'\nimport { Row, Col } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\n\nimport Climb from '../climbs/Climb'\n\n\nconst ClimbList = (props) => {\n\n    const API_ENDPOINT = \"http://localhost:8000\"\n    const { gym, colour } = props\n\n    // console.log(props)\n\n    const url = `${API_ENDPOINT}/climbs/${gym}/${colour}`\n\n    // console.log(url)\n\n    const [climbs, setClimbs] = useState([])\n\n    useEffect(() => {\n        console.log(\"Mounted\")\n        console.log(climbs)\n\n        fetch(url)\n        .then(res => res.json())\n        .then(data => { \n            console.log(data)\n\n            setClimbs(data)\n        })\n        .catch(e => console.log(e))\n       \n        return () => {\n            console.log(\"Unmounted\")\n        }\n    }, [])\n    \n    return (\n        <>\n            {colour.toUpperCase()}\n            <br />\n            <Row gutter={40}>\n                {(climbs).map(climb => \n\n                    <Col // Responsive settings. Each row has a span of 12\n                    xs={{ span: 6 }} sm={{ span: 6 }} md={{ span: 6 }} // 2 cards per row\n                    lg={{ span: 4 }} xl={{ span: 4 }} // 3 cards per row\n                    >\n\n                        <Climb climb={climb} />\n\n                    <br />\n                    </Col>\n                )}\n            </Row>\n\n        </>\n      );\n\n} \n\nexport default ClimbList","/Users/jellis/final_app/CityClimb_frontend/src/components/layout/SingleClimb.js",["95","96"],"import React, { useState, useEffect } from 'react'\nimport {\n    Jumbotron\n} from 'reactstrap';\n\n// import Climb from '../climbs/Climb'\n\nconst SingleClimb = (props) => {\n\n    // Look into memoization \n    // If a climb is being passed as a prop we dont need to fetch\n    const API_ENDPOINT = \"http://localhost:8000\"\n    const { gym, colour, climbId } = props.match.params\n\n    console.log(props)\n\n    const url = `${API_ENDPOINT}/climbs/${gym}/${colour}/${climbId}`\n\n    console.log(url)\n\n    const [climb, setClimb] = useState([])\n\n    useEffect(() => {\n        console.log(\"Mounted\")\n\n        fetch(url)\n        .then(res => res.json())\n        .then(data => { \n            // console.log(data)\n\n            setClimb(data)\n        })\n        .catch(e => console.log(e))\n       \n        return () => {\n            console.log(\"Unmounted\")\n        }\n    }, [])\n    \n    return (\n        <div  className=\"climbs\">\n        <br />\n            <Jumbotron>\n                <div class=\"yt-container\">\n                    <iframe class=\"responsive-iframe\" src={\"https://www.youtube.com/embed/\"+climb.video}>   </iframe>\n                </div>\n\n                    <h1 className=\"display-3\">{climb.wall}</h1>\n                    <p className=\"lead\">Colour: {climb.colour} </p>\n                    <p className=\"lead\">Location: {climb.gym} </p>\n                    {/* <p className=\"lead\">Setter: {dummyClimb.setter} </p> */}\n                    <p className=\"lead\">Date Set: {climb.createdAt} </p>\n                    <hr className=\"my-2\" />\n                    <p>Description maybe baybe?</p>\n                    <p className=\"lead\">\n        \n                    </p>\n             </Jumbotron>\n\n        </div>\n\n\n        // <> \n        // hello single climb \n        // {console.log(climb)} \n        // <Climb climb={climb} />\n        // </>\n      );\n\n} \n\nexport default SingleClimb","/Users/jellis/final_app/CityClimb_frontend/src/components/auth/Register.js",["97"],"import React, { Fragment, useState, useRef } from 'react'\nimport { useForm } from 'react-hook-form'\n\n\nconst Register = () => {\n    const { register, handleSubmit, errors, watch } = useForm()\n    const password = useRef({})\n    password.current = watch(\"password\", \"\")\n    \n    const onSubmit = (data) => {\n\n        console.log(data)\n\n        const formData = new FormData()\n        const name = `${data.firstName} ${data.lastName}`\n\n        formData.append(\"name\", name)\n        formData.append(\"email\", data.email)\n        formData.append(\"staffNumber\", data.staffNumber)\n        formData.append(\"password\", data.password)\n        formData.append(\"image\", data.image[0])\n\n        console.log(formData)\n\n        fetch('http://localhost:8000/users', {\n            method: 'POST',\n            body: formData,\n            // headers: {\n\n            // }\n        })\n    }\n    \n\n\n    return (\n        <Fragment>\n            <h1>Register</h1>\n            <form onSubmit={handleSubmit(onSubmit)}>\n                <div className='form-group'>\n                    <input type='text' ref={register({ required: true })} placeholder='First Name' name='firstName' />\n                </div>\n                <div className='form-group'>\n                    <input type='text' ref={register({ required: true })} placeholder='Last Name' name='lastName' />\n                </div>\n                <div className='form-group'>\n                    <input type='text' ref={register({ required: true })} placeholder='Email Address' name='email' />\n                </div>\n                <div className='form-group'>\n                    <input type='text' ref={register({ required: true })} placeholder='Staff Number' name='staffNumber' />\n                </div>\n                <div className='form-group'>\n                    {/* <input type='password' ref={register({ required: true })} placeholder='Password' name='password' /> */}\n                    <input\n                        type=\"password\"\n                        name=\"password\"\n                        placeholder=\"Password\"\n                        ref={register({\n                        required: \"You must specify a password\",\n                        minLength: {\n                            value: 8,\n                            message: \"Password must have at least 8 characters\"\n                        }\n                        })}\n                    />\n                </div>\n                {errors.password && <p>{errors.password.message}</p>}\n                <div className='form-group'>\n                    {/* <input type='password' placeholder='Confirm Password' name='confirmPassword' ref={register({\n                        required: true,\n                        validate: value => \n                            value === password.current || \"Passwords must match\"\n                    })} /> */}\n                    <input\n                        name=\"confirmPassword\"\n                        type=\"password\"\n                        placeholder=\"Confirm password\"\n                        // ref={register({\n                        // validate: value =>\n                        //     value === password.current || \"The passwords do not match\"\n                        // })}\n                    />\n                </div>\n                {/* {errors.confirmPassword && <p>{errors.confirmPassword.message}</p>} */}\n\n                <input ref={register} type=\"file\" name=\"image\" />\n\n                <input type=\"submit\" className=\"btn btn-primary\" value=\"Register\"/>\n            </form>\n        </Fragment>\n    )\n}\n\nexport default Register","/Users/jellis/final_app/CityClimb_frontend/src/components/climbs/Climb.js",[],"/Users/jellis/final_app/CityClimb_frontend/src/components/layout/GymView.js",[],"/Users/jellis/final_app/CityClimb_frontend/src/components/layout/Button.js",[],{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","severity":1,"message":"103","line":3,"column":22,"nodeType":"104","messageId":"105","endLine":3,"endColumn":28},{"ruleId":"102","severity":1,"message":"106","line":4,"column":5,"nodeType":"104","messageId":"105","endLine":4,"endColumn":11},{"ruleId":"102","severity":1,"message":"107","line":5,"column":5,"nodeType":"104","messageId":"105","endLine":5,"endColumn":10},{"ruleId":"108","severity":2,"message":"109","line":31,"column":3,"nodeType":"104","messageId":"110","endLine":31,"endColumn":12},{"ruleId":"102","severity":1,"message":"111","line":2,"column":10,"nodeType":"104","messageId":"105","endLine":2,"endColumn":14},{"ruleId":"112","severity":1,"message":"113","line":21,"column":26,"nodeType":"114","messageId":"115","endLine":21,"endColumn":28},{"ruleId":"112","severity":1,"message":"113","line":22,"column":26,"nodeType":"114","messageId":"115","endLine":22,"endColumn":28},{"ruleId":"112","severity":1,"message":"113","line":23,"column":26,"nodeType":"114","messageId":"115","endLine":23,"endColumn":28},{"ruleId":"102","severity":1,"message":"116","line":27,"column":19,"nodeType":"104","messageId":"105","endLine":27,"endColumn":25},{"ruleId":"102","severity":1,"message":"117","line":33,"column":19,"nodeType":"104","messageId":"105","endLine":33,"endColumn":23},{"ruleId":"102","severity":1,"message":"111","line":3,"column":10,"nodeType":"104","messageId":"105","endLine":3,"endColumn":14},{"ruleId":"118","severity":1,"message":"119","line":37,"column":8,"nodeType":"120","endLine":37,"endColumn":10,"suggestions":"121"},{"ruleId":"118","severity":1,"message":"122","line":38,"column":8,"nodeType":"120","endLine":38,"endColumn":10,"suggestions":"123"},{"ruleId":"124","severity":1,"message":"125","line":45,"column":21,"nodeType":"126","endLine":45,"endColumn":106},{"ruleId":"102","severity":1,"message":"127","line":1,"column":27,"nodeType":"104","messageId":"105","endLine":1,"endColumn":35},"no-native-reassign",["128"],"no-negated-in-lhs",["129"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'Switch' is defined but never used.","'Route' is defined but never used.","no-undef","'useEffect' is not defined.","undef","'Link' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'config' is assigned a value but never used.","'body' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'climbs' and 'url'. Either include them or remove the dependency array.","ArrayExpression",["130"],"React Hook useEffect has a missing dependency: 'url'. Either include it or remove the dependency array.",["131"],"jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement","'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"132","fix":"133"},{"desc":"134","fix":"135"},"Update the dependencies array to be: [climbs, url]",{"range":"136","text":"137"},"Update the dependencies array to be: [url]",{"range":"138","text":"139"},[798,800],"[climbs, url]",[856,858],"[url]"]